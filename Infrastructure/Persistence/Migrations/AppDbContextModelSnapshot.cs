// <auto-generated />
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.List", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Lists");
                });

            modelBuilder.Entity("Domain.Entities.Point", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ListId")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ListId", "X", "Y")
                        .IsUnique();

                    b.ToTable("Points");
                });

            modelBuilder.Entity("Domain.Entities.Square", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ListId")
                        .HasColumnType("int");

                    b.Property<int>("Point1X")
                        .HasColumnType("int");

                    b.Property<int>("Point1Y")
                        .HasColumnType("int");

                    b.Property<int>("Point2X")
                        .HasColumnType("int");

                    b.Property<int>("Point2Y")
                        .HasColumnType("int");

                    b.Property<int>("Point3X")
                        .HasColumnType("int");

                    b.Property<int>("Point3Y")
                        .HasColumnType("int");

                    b.Property<int>("Point4X")
                        .HasColumnType("int");

                    b.Property<int>("Point4Y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.ToTable("Squares");
                });

            modelBuilder.Entity("Domain.Entities.Point", b =>
                {
                    b.HasOne("Domain.Entities.List", null)
                        .WithMany("Points")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Square", b =>
                {
                    b.HasOne("Domain.Entities.List", null)
                        .WithMany("Squares")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.List", b =>
                {
                    b.Navigation("Points");

                    b.Navigation("Squares");
                });
#pragma warning restore 612, 618
        }
    }
}
